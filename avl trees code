#include<stdio.h>
#include<stdlib.h>
typedef struct node
{
	int data;
	struct node*left,*right;
	int ht;
}node;
int height(node*T)
{
	int lh,rh;
	if(T==NULL)
		return(0);
	
	if(T->left==NULL)
		lh=0;
	else
		lh=1+T->left->ht;
	
	if(T->right==NULL)
		rh=0;
	else
		rh=1+T->right->ht;

	if(lh>rh)
		return(lh);
	
	return(rh);
}
int BF(node*T)
{
	int lh,rh;
	if(T==NULL)
		return(0);
	
	if(T->left==NULL)
		lh=0;
	else
		lh=1+T->left->ht;

	if(T->right==NULL)
		rh=0;
	else
		rh=1+T->right->ht;

	return(lh-rh);
}
node*rotateright(node*x)
{
	node*y;
	
	y=x->left;
	x->left=y->right;
	y->right=x;
	
	x->ht=height(x);
	y->ht=height(y);
	
	return(y);
}
node*rotateleft(node*x)
{
	node*y;
	
	y=x->right;
	x->right=y->left;
	y->left=x;
	
	x->ht=height(x);
	y->ht=height(y);
	
	return(y);
}

node*RR(node*T)
{
	T=rotateleft(T);
	return(T);
}

node*LL(node*T)
{
	T=rotateright(T);
	return(T);
}

node*LR(node*T)
{
	T->left=rotateleft(T->left);
	T=rotateright(T);
	return(T);
}

node*RL(node*T)
{
	T->right=rotateright(T->right);
	T=rotateleft(T);
	return(T);
}
node*insert(node*T,int x)
{
	if(T==NULL)
	{
		T=(node*)malloc(sizeof(node));
		T->data=x;
		T->left=NULL;
		T->right=NULL;
	}
	else
	if(x>T->data)
	{
		T->right=insert(T->right,x);
		if(BF(T)==-2)
			if(x>T->right->data)
				T=RR(T);
			else
				T=RL(T);
	}
	else
	if(x<T->data)
	{
		T->left=insert(T->left,x);
		if(BF(T)==2)
			if(x<T->left->data)
				T=LL(T);
			else
				T=LR(T);
	}
	T->ht=height(T);
	return(T);
}
void inorder(node*T)
{
	if(T!=NULL)
	{
		inorder(T->left);
		printf("%d(BF=%d)",T->data,BF(T));
		inorder(T->right);
	}
}
node*deletion(node*T,int x)
{
	node*p;
	if(T==NULL)
		return NULL;
	else
		if(x>T->data)
		{
			T->right=deletion(T->right,x);
			if(BF(T)==2)
				if(BF(T->left)>=0)
					T=LL(T);
				else
					T=LR(T);
		}
		else
			if(x<T->data)
			{
				T->left=deletion(T->left,x);
				if(BF(T)==-2)
					if(BF(T->right)<=0)
						T=RR(T);
					else
						T=RL(T);
			}
			else
			{
				if(T->right!=NULL)
				{
					p=T->right;
					while(p->left!=NULL)
						p=p->left;
					T->data=p->data;
					T->right=deletion(T->right,p->data);
					if((BF(T)==2))
						if(BF(T->left)>=0)
							T=LL(T);
						else
							T=LR(T);
				}
				else
					return(T->left);
			}
			T->ht=height(T);
	return(T);
}
struct node* search(struct node *rootnode, int s)
{
    if(rootnode==NULL || rootnode->data==s)   
        return rootnode;
    else if(s > rootnode->data) 
        return search(rootnode->right,s);
    else
        return search(rootnode->left,s);
}
void sprint(struct node *rootnode) 
{
	if (rootnode != NULL)
		printf("%d = search element found", rootnode->data);
	else
		printf("search element not Found");
}
int main()
{
	node*root=NULL;
	int x,n,i,op;
	do
	{
		printf("\n 1.insert 2.display 3.search 4.Delete 5.quit\n");
		printf("\nEnter your choice");
		scanf("%d",&op);
		switch(op)
		{
			case 1:
				printf("\nEnter no of elements");
				scanf("%d",&n);
				printf("\nEnter the tree data:");
				for(i=0;i<n;i++)
				{
					scanf("%d",&x);
					root=insert(root,x);
				}
			break;
			case 2:
				printf("\nInorder sequence:");
				inorder(root);
				printf("\n");
			break;
			case 3:
				printf("\n Enter the value to be searched");
				scanf("%d",&x);
				root=search(root,x);       	
				sprint(root);
			break;
			case 4 :   
                printf("\nEnter the value to be deleted\n");  
                scanf("%d",&x);  
              	root=deletion(root,x);
                inorder(root); 
            break;
		}
	}while(op!=5);
	return 0;
}
